axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
)+
scale_x_discrete(labels = c("May", "August", "October")) +
scale_fill_manual(values = c('#999999', '#E69F00')) +
labs(x = "Month", y = "Total Biomass (g)")
View(gs_mt_data)
summ_data <- mt_data %>%
group_by(Month, Location, Species) %>%
summarize(total_count = sum(Number, na.rm = TRUE), total_biomass = sum(Wt, na.rm = TRUE))
head(summ_data)
# Filter the data to include only "Golden Shiner"
creek_chub_data <- summ_data %>%
filter(Species == "Creek Chub")
# Define the order of months
month_order <- factor(creek_chub_data$Month, levels = c("May", "August", "October"))
# Create the plot
ggplot(data = creek_chub_data, aes(x = month_order, y = total_biomass, fill = Location)) +
geom_bar(stat = "identity" , position = position_dodge2(preserve = "single")) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
)+
scale_x_discrete(labels = c("May", "August", "October")) +
scale_fill_manual(values = c('#999999', '#E69F00')) +
labs(x = "Month", y = "Total Biomass (g)")
# Filter the data to include only "Golden Shiner"
gs_mt_data <- summ_data %>%
filter(Species == "Golden Shiner")
# Define the order of months
month_order <- factor(gs_mt_data$Month, levels = c("May", "August", "October"))
# Create the plot
ggplot(data = gs_mt_data, aes(x = month_order, y = total_biomass, fill = Location)) +
geom_bar(stat = "identity" , position = position_dodge2(preserve = "single")) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
)+
scale_x_discrete(labels = c("May", "August", "October")) +
scale_fill_manual(values = c('#999999', '#E69F00')) +
labs(x = "Month", y = "Total Biomass (g)")
# Create the plot
ggplot(data = gs_mt_data, aes(x = month_order, y = total_biomass, fill = Location)) +
geom_bar(stat = "identity" , position = position_dodge2(preserve = "single")) +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
)+
scale_x_discrete(labels = c("May", "August", "October")) +
scale_fill_manual(values = c('cadetblue', 'sandybrown')) +
labs(x = "Month", y = "Total Biomass (g)")
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line() +
labs(x = "Date",
y = "Average Temperature (°C)") +
theme_minimal() +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line(size = 1) +
labs(x = "Date",
y = "Average Temperature (°C)") +
theme_minimal() +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line(linewidth = 1) +
labs(x = "Date",
y = "Average Temperature (°C)") +
theme_minimal() +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line(linewidth = 0.8) +
labs(x = "Date",
y = "Average Temperature (°C)") +
theme_minimal() +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
View(daily_avg)
# Calculate the average temperature for each day for each location
daily_avg <- combined_data %>%
group_by(Date, Location, Month) %>%
reframe(Avg_Temp = mean(temp, na.rm = TRUE),
Sd_Temp = sd(temp, na.rm = TRUE)) %>%
filter(! Month > 9) %>%
slice(-c(284),)
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line(linewidth = 0.8) +
labs(x = "Date",
y = "Average Temperature (°C)") +
theme_minimal() +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line(linewidth = 0.8) +
labs(x = "Date",
y = "Average Temperature (°C)") +
theme_minimal() +
theme(
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
) +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line(linewidth = 0.8) +
labs(x = "Date",
y = "Avg. Temperature (°C)") +
theme_minimal() +
theme(
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
) +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
ggplot(weir_data, aes(x = tl, color = direction)) +
geom_density() +
facet_wrap(~ month) +
scale_color_brewer(palette = "Dark") +
labs(
x = "Total Length (mm)",
y = "Frequency",
color = "direction") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10)),
panel.spacing = unit(2, "lines"),
strip.text = element_text(size = 12, face = "bold")
)
ggplot(weir_data, aes(x = tl, color = direction)) +
geom_density() +
facet_wrap(~ month) +
scale_color_brewer(palette = "Set2") +
labs(
x = "Total Length (mm)",
y = "Frequency",
color = "direction") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10)),
panel.spacing = unit(2, "lines"),
strip.text = element_text(size = 12, face = "bold")
)
##Read in weir data from 2023
weir_data<- read.csv("weir_data.csv", header=T)
head(weir_data)
library(tidyverse)
library(lubridate)
library(stringr)
weir_data$date <- ymd(weir_data$date) # Convert to Date format if not already
weir_data <- weir_data %>%
mutate(date = as.character(date),  # Convert to character if it's in Date format
date = substring(date, 3),  # Remove the first two digits of the year
date = dmy(date))  # Convert to Date format with dd-mm-yy structure
weir_data <- weir_data %>%
filter(date != as.Date("2023-05-19"))
weir_summ_data <- weir_data %>%
mutate(month = month(date),
day = day(date),
wt = as.numeric(wt)) %>%  # Convert wt to numeric
mutate(month = case_when(
month == 9 ~ "October",  # Treat September as October
TRUE ~ month.name[month]  # Convert other months to full names
)) %>%
group_by(month, species, direction) %>%
summarize(
total_biomass = sum(wt, na.rm = TRUE),  # Calculate total biomass for the month
average_mass = mean(wt, na.rm = TRUE),# Calculate average daily biomass
average_fl = mean(fl, na.rm = TRUE),
average_tl = mean(tl, na.rm = TRUE)
) %>%
ungroup()
# Filter the data to include only "Golden Shiner"
golden_shiner_data <- weir_summ_data %>%
filter(species == "Golden Shiner")
# Define the order of months
month_order <- factor(golden_shiner_data$month, levels = c("May", "August", "October"))
# Create the plot for total monthly biomass
ggplot(data = golden_shiner_data, aes(x = month_order, y = total_biomass, fill = direction)) +
geom_bar(stat = "identity", position = position_dodge2(preserve = "single")) +
theme_minimal() +  # Using a minimal theme as a base
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
)+
scale_x_discrete(labels = c("May", "August", "October")) +
scale_fill_manual(values = c('azure3', 'azure4')) +
labs(x = "Month", y = "Total Biomass (g)")
weir_data <- weir_data %>%
mutate(tl = as.numeric(tl),  # Convert tl to numeric if it's not already
month = month(date),
month = case_when(
month == 9 ~ "October",  # Treat September as October
TRUE ~ month(date, label = TRUE, abbr = FALSE)  # Extract month as full name
))
ggplot(weir_data, aes(x = tl, color = direction)) +
geom_density() +
facet_wrap(~ month) +
scale_color_brewer(palette = "Set2") +
labs(
x = "Total Length (mm)",
y = "Frequency",
color = "direction") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10)),
panel.spacing = unit(2, "lines"),
strip.text = element_text(size = 12, face = "bold")
)
ggplot(weir_data, aes(x = tl, color = direction)) +
geom_density() +
facet_wrap(~ month) +
scale_color_brewer(palette = "Set3") +
labs(
x = "Total Length (mm)",
y = "Frequency",
color = "direction") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10)),
panel.spacing = unit(2, "lines"),
strip.text = element_text(size = 12, face = "bold")
)
ggplot(weir_data, aes(x = tl, color = direction)) +
geom_density() +
facet_wrap(~ month) +
scale_color_brewer(palette = "Set4") +
labs(
x = "Total Length (mm)",
y = "Frequency",
color = "direction") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10)),
panel.spacing = unit(2, "lines"),
strip.text = element_text(size = 12, face = "bold")
)
ggplot(weir_data, aes(x = tl, color = direction)) +
geom_density() +
facet_wrap(~ month) +
scale_color_brewer(palette = "Set5") +
labs(
x = "Total Length (mm)",
y = "Frequency",
color = "direction") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10)),
panel.spacing = unit(2, "lines"),
strip.text = element_text(size = 12, face = "bold")
)
ggplot(weir_data, aes(x = tl, color = direction)) +
geom_density() +
facet_wrap(~ month) +
scale_color_manual(values = c("Downstream" = "slategrey", "Upstream" = "lightgrey")) +
labs(
x = "Total Length (mm)",
y = "Frequency",
color = "direction") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10)),
panel.spacing = unit(2, "lines"),
strip.text = element_text(size = 12, face = "bold")
)
ggplot(weir_data, aes(x = tl, color = direction)) +
geom_density() +
facet_wrap(~ month) +
scale_color_manual(values = c("Downstream" = "slategrey", "Upstream" = "grey")) +
labs(
x = "Total Length (mm)",
y = "Frequency",
color = "direction") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10)),
panel.spacing = unit(2, "lines"),
strip.text = element_text(size = 12, face = "bold")
)
ggplot(weir_data, aes(x = tl, color = direction)) +
geom_density() +
facet_wrap(~ month) +
scale_color_manual(values = c("Downstream" = "azure3", "Upstream" = "azure4")) +
labs(
x = "Total Length (mm)",
y = "Frequency",
color = "direction") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10)),
panel.spacing = unit(2, "lines"),
strip.text = element_text(size = 12, face = "bold")
)
ggplot(weir_data, aes(x = tl, color = direction)) +
geom_density(linewidth = 0.9) +
facet_wrap(~ month) +
scale_color_manual(values = c("Downstream" = "azure3", "Upstream" = "azure4")) +
labs(
x = "Total Length (mm)",
y = "Frequency",
color = "direction") +
theme_minimal() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10)),
panel.spacing = unit(2, "lines"),
strip.text = element_text(size = 12, face = "bold")
)
# Calculate the average temperature for each day for each location
daily_avg <- combined_data %>%
group_by(Date, Location, Month) %>%
reframe(Avg_Temp = mean(temp, na.rm = TRUE),
Sd_Temp = sd(temp, na.rm = TRUE)) %>%
filter(! Month > 9) %>%
slice(-c(283),)
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line(linewidth = 0.8) +
labs(x = "Date",
y = "Avg. Temperature (°C)") +
theme_minimal() +
theme(
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
) +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
# Calculate the average temperature for each day for each location
daily_avg <- combined_data %>%
group_by(Date, Location, Month) %>%
reframe(Avg_Temp = mean(temp, na.rm = TRUE),
Sd_Temp = sd(temp, na.rm = TRUE)) %>%
filter(! Month > 9) %>%
slice(-c(280),)
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line(linewidth = 0.8) +
labs(x = "Date",
y = "Avg. Temperature (°C)") +
theme_minimal() +
theme(
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
) +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
# Calculate the average temperature for each day for each location
daily_avg <- combined_data %>%
group_by(Date, Location, Month) %>%
reframe(Avg_Temp = mean(temp, na.rm = TRUE),
Sd_Temp = sd(temp, na.rm = TRUE)) %>%
filter(! Month > 9) %>%
slice(-c(270),)
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line(linewidth = 0.8) +
labs(x = "Date",
y = "Avg. Temperature (°C)") +
theme_minimal() +
theme(
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
) +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
# Ensure 'Month' is a factor and in order
daily_avg$Month <- factor(daily_avg$Month, levels = unique(daily_avg$Month))
# Calculate the average temperature for each day for each location
daily_avg <- combined_data %>%
group_by(Date, Location, Month) %>%
reframe(Avg_Temp = mean(temp, na.rm = TRUE),
Sd_Temp = sd(temp, na.rm = TRUE)) %>%
filter(! Month > 9) %>%
slice(-c(286),)
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line(linewidth = 0.8) +
labs(x = "Date",
y = "Avg. Temperature (°C)") +
theme_minimal() +
theme(
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
) +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
# Calculate the average temperature for each day for each location
daily_avg <- combined_data %>%
group_by(Date, Location, Month) %>%
reframe(Avg_Temp = mean(temp, na.rm = TRUE),
Sd_Temp = sd(temp, na.rm = TRUE)) %>%
filter(! Month > 9) %>%
slice(-c(285),)
# Now use ggplot2 to plot the average daily temperature
ggplot(daily_avg, aes(x = Date, y = Avg_Temp, color = Location, group = Location)) +
geom_line(linewidth = 0.8) +
labs(x = "Date",
y = "Avg. Temperature (°C)") +
theme_minimal() +
theme(
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "grey"),
axis.text = element_text(size = 10),
axis.title.x = element_text(size = 14, margin = margin(t = 10)),
axis.title.y = element_text(size = 14, margin = margin(r = 10)),
axis.title.y.right = element_text(size = 14, margin = margin(l = 10))
) +
scale_color_manual(values = c("lake" = "sandybrown", "creek" = "cadetblue"))
